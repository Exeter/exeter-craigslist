/*
 * Where do we verify authentication?
 */

var TESTING = (function(){
	var posts = [
		{
			id: '000000000',
			title: 'Title',
			description: "This is my Title! Wanna buy it!",
			date: "2013-10-14T02:53:50.322Z",
			category: 'furniture',
			//image:
		},
		{
			id: '000000001',
			title: 'Tittle',
			description: "This is a tittle!",
			date: "2013-10-15T02:53:50.322Z",
			price: "$40",
			category: 'furniture',
			//image:
		},
		{
			title: 'Titttle',
			description: "This is a titttle!",
			date: "2013-10-16T02:53:50.322Z",
			price: "$40",
			category: 'textbooks'
			//image:
		},
		{
			title: 'physics textbook',
			description: "this reminds me of the worst year of my life, but nothing is written in it and as a matter of fact, it's never really been opened. #physics #textbook #advanced",
			date: "2013-10-16T02:53:50.322Z",
			price: "$100",
			category: 'textbooks'
		},
		{
			title: 'greek dictionary',
			description: "by definition, the most useless thing in this century",
			date: "2013-10-16T02:53:50.322Z",
			price: "$100",
			category: 'textbooks'
			//image: 
		},
		{
			title: 'greek dictionary',
			description: "by definition, the most useless thing in this century",
			date: "2013-10-16T02:53:50.322Z",
			price: "$100",
			category: 'textbooks'
			//image: 
		},
		{
			title: 'TI-84',
			description: "so old you can donate it to a museum. prices according to a priceless relic #calculator #ti84",
			date: "2013-10-16T02:53:50.322Z",
			price: "$90",
			category: 'electronics'
			//image: 
		},
		{
			title: 'TI-84',
			description: "don't want it anymore because it is useless for math + science here...but you should buy it anyways! ps missing all its keys pps bateries not included ppps neither is the screen #ti84 #calculator",
			date: "2013-10-16T02:53:50.322Z",
			price: "$200",
			category: 'electronics'
			//image: 
		},
		{
			title: 'graph paper',
			description: "graph paper (used) but it's good for scratch work i guess #graphpaper",
			date: "2013-10-16T02:53:50.322Z",
			price: "$5",
			category: 'supplies'
			//image: 
		},
		{
			title: 'hammock',
			description: "good for spring term. napping. #hammock #furniture ",
			date: "2013-10-16T02:53:50.322Z",
			price: "$15",
			category: 'supplies'
			//image: 
		},
		{
			title: 'pencil',
			description: "warning: i chewed on it, but i cleaned it with hand sanitizer, so it should all be ok. (caution: 2 inches left, ready for compost) #pencil",
			date: "2013-10-16T02:53:50.322Z",
			price: "$1",
			category: 'supplies'
			//image: 
		},
		{
			title: 'leftovers',
			description: "las olas leftovers...don't know what it is exactly, but it's green, squishy, and smells like fine cheese. #food #lasolas",
			date: "2013-10-16T02:53:50.322Z",
			price: "$0",
			category: 'other'
			//image: 
		}
	];

	return {
	    get_auth_token: function(creds) {
		console.log('getting session token from server...');
		if (creds.username == "") { //dummy login
		    Cookies.set('ec_token', '1337');
		    return true;
		}
		return false;
	    },
	    get_posts: function() { return posts},
	};
})();

var PRODUCTION = {
	get_auth_token: function() {
	//ajax call for session token
	}
};

Backbone.View.prototype.close = function() {
	this.undelegateEvents();
	if (this.onClose) {
		this.onClose();
	}
}


$(document).ready(function() {(function(MODE) {

	var posts = new Backbone.Collection(MODE.get_posts());

	var UnauthedView = Backbone.View.extend({
		el: '#account-area',
		initialize: function() {
			console.log("loginview initialized!");
			this.render();
		},
	    	events: {
			"submit #login-form": "get_auth_token",
		},
	    	get_auth_token: function(event) {
			event.preventDefault();
			var creds = {
				username: $("#login_username").val(),
	    			password: $("#login_password").val()
			}
			var success = MODE.get_auth_token(creds);
			if (success) {
				this.toAuthedView();
			} else {
				this.render_fail();
			}
		},
		toAuthedView: function() {
			var authedView = new AuthedView();
		},
		render: function() {
			this.$el.html($("#login-template").html());
		},
	    	render_fail: (function() {
			var failed = false;
			return function() {
				if (!failed) {
					$("#login-form").prepend('<i>try again...');
					failed = true;
				}
			}
		})(),
	});

	var AuthedView = Backbone.View.extend({
		el: '#account-area',
		initialize: function() {
			console.log('AccountView initialized');
			this.render();
		},
		events: {
			"click #logout": "logout",
			"click #new-post": "new_post",
			"click #my-posts": "my_posts"
		},
	    	logout: function() {
			Cookies.expire('ec_token');
			location.reload();
		},
	    	new_post: function() {
			router.navigate("newpost", {trigger: true});
		},
		my_posts: function() {
			router.navigate("newpost", {trigger: true});
		},
	    	render: function() {
			console.log('Rendering AuthedView');
			this.$el.html($("#account-template").html());
		}
	});

//Content Stuff
	var contentController = new (function() {
		var views = {
			PostsView: Backbone.View.extend({
				el: '#content',
				events: {
					"click #posts-mode-list": "renderListPostsView",
					"click #posts-mode-grid": "renderGridPostsView"
				},
				subviewController: new (function() {
					var views = {
						ListPostsView: Backbone.View.extend({
							el: "#posts-content",
							render: function() {
								var html = "<ul>";
								var that = this;
								posts.each(function(post) {
									var element = "<li>" + post.get("title") + "</li>";
									html += element;
								});
							       	html += "</ul>";
								this.$el.html(html);
							}
						}),
						GridPostsView: Backbone.View.extend({
							el: "#posts-content",
							render: function() {
								this.$el.html('TODO: implement GridView');
							}
						}),
					};
					this.currentViewString = "ListPostsView"; //abstract out
					this.show = function(viewstring, override) {
						if (this.currentView && !override){
							if (this.currentViewString == viewstring) return;
							this.currentView.close();
						}
						this.currentView = new views[viewstring];
						this.currentViewString = viewstring;

						var that = this;
						$('#posts-content').fadeOut(100, function() {
							that.currentView.render();
						}).fadeIn(200);
					};
				})(),
				renderListPostsView:  function() { this.subviewController.show("ListPostsView")},
				renderGridPostsView:  function() { this.subviewController.show("GridPostsView")},
				render: function() {
					this.$el.html($("#posts-template").html());
					this.subviewController.show(this.subviewController.currentViewString, true);
				},
				onClose: function() {
					this.subviewController.currentView.close();
				}
			}),


			NewPostView: Backbone.View.extend({
				el: '#content',
				render: function() {
					this.$el.html($("#add-post-template").html());
				}
			}),


			MyPostsView: Backbone.View.extend({
				el: '#content',
				render: function() {
					this.$el.html($("#my-posts-template").html());
				}
			})
		};

		this.show = function(viewstring) {
			if (this.currentView){
				if (this.currentViewString == viewstring) return;
				this.currentView.close();
			}
			this.currentView = new views[viewstring];
			this.currentViewString = viewstring;
			var that = this;
			$('#content').fadeOut(100, function() {
				that.currentView.render();
			}).fadeIn(200);
		}


	})()

	var Router = Backbone.Router.extend({
		routes: {
	    		'': "index", 
			"newpost": "newpost",
	    		"*notFound": 'notFound',
		},
	    	index: function() {
			contentController.show("PostsView");
		},
	    	newpost: function() {
			contentController.show('NewPostView');
		},
	    	notFound: function() {
			console.log("not found...");
		},
	});
	var router = new Router;
	Backbone.history.start({pushState: true});

//Main
	var mainview = new (Backbone.View.extend({
		el: 'body',
		initialize: function() {
			var authenticated = (function() {
				return !!(Cookies.get('ec_token'));
			})();

			if (authenticated){
				new AuthedView();
			} else {
				new UnauthedView();
			}
		},
	    	events: {
			"click #title": "renderPostsView",
		},
	    	renderPostsView: function() {
			router.navigate("", {trigger: true});
		}
	}));
})(TESTING)});
